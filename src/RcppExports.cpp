// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "CoarsePosteriorSummary_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// W2dist_normal
double W2dist_normal(const SEXP& X_, const SEXP& Y_, double p);
RcppExport SEXP _CoarsePosteriorSummary_W2dist_normal(SEXP X_SEXP, SEXP Y_SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(W2dist_normal(X_, Y_, p));
    return rcpp_result_gen;
END_RCPP
}
// Wasserstein_p_iid
double Wasserstein_p_iid(const SEXP& X_, const SEXP& Y_, double p);
RcppExport SEXP _CoarsePosteriorSummary_Wasserstein_p_iid(SEXP X_SEXP, SEXP Y_SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Wasserstein_p_iid(X_, Y_, p));
    return rcpp_result_gen;
END_RCPP
}
// W2_idx
NumericVector W2_idx(const NumericMatrix& gamma_, const NumericMatrix& X_, const NumericMatrix& theta_, const NumericMatrix& mu_, const IntegerVector& idx_, int max_p);
RcppExport SEXP _CoarsePosteriorSummary_W2_idx(SEXP gamma_SEXP, SEXP X_SEXP, SEXP theta_SEXP, SEXP mu_SEXP, SEXP idx_SEXP, SEXP max_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gamma_(gamma_SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type idx_(idx_SEXP);
    Rcpp::traits::input_parameter< int >::type max_p(max_pSEXP);
    rcpp_result_gen = Rcpp::wrap(W2_idx(gamma_, X_, theta_, mu_, idx_, max_p));
    return rcpp_result_gen;
END_RCPP
}
// bayesConjRegNormal
List bayesConjRegNormal(int n_samp, const List& hyperparameters, const NumericVector& Y_, const NumericMatrix X_);
RcppExport SEXP _CoarsePosteriorSummary_bayesConjRegNormal(SEXP n_sampSEXP, SEXP hyperparametersSEXP, SEXP Y_SEXP, SEXP X_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samp(n_sampSEXP);
    Rcpp::traits::input_parameter< const List& >::type hyperparameters(hyperparametersSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X_(X_SEXP);
    rcpp_result_gen = Rcpp::wrap(bayesConjRegNormal(n_samp, hyperparameters, Y_, X_));
    return rcpp_result_gen;
END_RCPP
}
// distance
Rcpp::NumericMatrix distance(const matrix& A_, const matrix& B_);
RcppExport SEXP _CoarsePosteriorSummary_distance(SEXP A_SEXP, SEXP B_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const matrix& >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< const matrix& >::type B_(B_SEXP);
    rcpp_result_gen = Rcpp::wrap(distance(A_, B_));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
NumericMatrix rmvnorm(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _CoarsePosteriorSummary_rmvnorm(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(nsamples, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
NumericVector dmvnorm(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _CoarsePosteriorSummary_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// mse_C
double mse_C(vector& mu, matrix& est);
RcppExport SEXP _CoarsePosteriorSummary_mse_C(SEXP muSEXP, SEXP estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< matrix& >::type est(estSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_C(mu, est));
    return rcpp_result_gen;
END_RCPP
}
// mse_idx_dist
NumericVector mse_idx_dist(NumericMatrix& V_, NumericMatrix& X_, NumericMatrix& theta_, NumericVector& mu_, IntegerVector& idx_, int max_p);
RcppExport SEXP _CoarsePosteriorSummary_mse_idx_dist(SEXP V_SEXP, SEXP X_SEXP, SEXP theta_SEXP, SEXP mu_SEXP, SEXP idx_SEXP, SEXP max_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type V_(V_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type idx_(idx_SEXP);
    Rcpp::traits::input_parameter< int >::type max_p(max_pSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_idx_dist(V_, X_, theta_, mu_, idx_, max_p));
    return rcpp_result_gen;
END_RCPP
}
// mse_idx_expect
NumericVector mse_idx_expect(NumericMatrix& V_, NumericMatrix& X_, NumericMatrix& theta_, NumericVector& mu_, IntegerVector& idx_, int max_p);
RcppExport SEXP _CoarsePosteriorSummary_mse_idx_expect(SEXP V_SEXP, SEXP X_SEXP, SEXP theta_SEXP, SEXP mu_SEXP, SEXP idx_SEXP, SEXP max_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type V_(V_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type idx_(idx_SEXP);
    Rcpp::traits::input_parameter< int >::type max_p(max_pSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_idx_expect(V_, X_, theta_, mu_, idx_, max_p));
    return rcpp_result_gen;
END_RCPP
}
// mse_idx
NumericVector mse_idx(NumericMatrix& V_, NumericMatrix& X_, NumericVector& mu_, IntegerVector& idx_, int max_p);
RcppExport SEXP _CoarsePosteriorSummary_mse_idx(SEXP V_SEXP, SEXP X_SEXP, SEXP mu_SEXP, SEXP idx_SEXP, SEXP max_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type V_(V_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type idx_(idx_SEXP);
    Rcpp::traits::input_parameter< int >::type max_p(max_pSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_idx(V_, X_, mu_, idx_, max_p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CoarsePosteriorSummary_W2dist_normal", (DL_FUNC) &_CoarsePosteriorSummary_W2dist_normal, 3},
    {"_CoarsePosteriorSummary_Wasserstein_p_iid", (DL_FUNC) &_CoarsePosteriorSummary_Wasserstein_p_iid, 3},
    {"_CoarsePosteriorSummary_W2_idx", (DL_FUNC) &_CoarsePosteriorSummary_W2_idx, 6},
    {"_CoarsePosteriorSummary_bayesConjRegNormal", (DL_FUNC) &_CoarsePosteriorSummary_bayesConjRegNormal, 4},
    {"_CoarsePosteriorSummary_distance", (DL_FUNC) &_CoarsePosteriorSummary_distance, 2},
    {"_CoarsePosteriorSummary_rmvnorm", (DL_FUNC) &_CoarsePosteriorSummary_rmvnorm, 3},
    {"_CoarsePosteriorSummary_dmvnorm", (DL_FUNC) &_CoarsePosteriorSummary_dmvnorm, 3},
    {"_CoarsePosteriorSummary_mse_C", (DL_FUNC) &_CoarsePosteriorSummary_mse_C, 2},
    {"_CoarsePosteriorSummary_mse_idx_dist", (DL_FUNC) &_CoarsePosteriorSummary_mse_idx_dist, 6},
    {"_CoarsePosteriorSummary_mse_idx_expect", (DL_FUNC) &_CoarsePosteriorSummary_mse_idx_expect, 6},
    {"_CoarsePosteriorSummary_mse_idx", (DL_FUNC) &_CoarsePosteriorSummary_mse_idx, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_CoarsePosteriorSummary(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
